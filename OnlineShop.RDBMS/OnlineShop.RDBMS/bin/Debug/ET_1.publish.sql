/*
Deployment script for ETDatabase

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "ETDatabase"
:setvar DefaultFilePrefix "ETDatabase"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[tCards]...';


GO
CREATE TABLE [dbo].[tCards] (
    [CardID]         INT           IDENTITY (1, 1) NOT NULL,
    [CardNumber]     NVARCHAR (25) NOT NULL,
    [NameOnCard]     NVARCHAR (50) NOT NULL,
    [ExpirationDate] DATETIME2 (0) NOT NULL,
    [CVV]            INT           NOT NULL,
    CONSTRAINT [PK_tCards_CardID] PRIMARY KEY CLUSTERED ([CardID] ASC)
);


GO
PRINT N'Creating [dbo].[tCategories]...';


GO
CREATE TABLE [dbo].[tCategories] (
    [CategoryID]          INT           IDENTITY (1, 1) NOT NULL,
    [CategoryName]        NVARCHAR (25) NOT NULL,
    [CategoryDescription] TEXT          NULL,
    CONSTRAINT [PK_tCategories_CategoryID] PRIMARY KEY CLUSTERED ([CategoryID] ASC),
    CONSTRAINT [AK_tCategories_CategorytName] UNIQUE NONCLUSTERED ([CategoryName] ASC)
);


GO
PRINT N'Creating [dbo].[tOrderDetails]...';


GO
CREATE TABLE [dbo].[tOrderDetails] (
    [OrderID]   INT        IDENTITY (1, 1) NOT NULL,
    [ProductID] INT        NOT NULL,
    [OrderCost] FLOAT (53) NOT NULL,
    [Quantity]  INT        NOT NULL,
    [PromoID]   INT        NOT NULL,
    CONSTRAINT [PK_tOrderDetails_OrderID] PRIMARY KEY CLUSTERED ([OrderID] ASC)
);


GO
PRINT N'Creating [dbo].[tOrders]...';


GO
CREATE TABLE [dbo].[tOrders] (
    [OrderID]         INT            NOT NULL,
    [UserID]          INT            NOT NULL,
    [OrderDate]       DATETIME2 (0)  NOT NULL,
    [ShippedDate]     DATETIME2 (0)  NOT NULL,
    [ShippingAddress] NVARCHAR (100) NOT NULL,
    [ShippingMethod]  NVARCHAR (25)  NOT NULL,
    [OrderStatus]     NVARCHAR (25)  NOT NULL,
    [Comments]        TEXT           NULL
);


GO
PRINT N'Creating [dbo].[tProducts]...';


GO
CREATE TABLE [dbo].[tProducts] (
    [ProductID]          INT             IDENTITY (1, 1) NOT NULL,
    [CategoryID]         INT             NOT NULL,
    [ProductName]        NVARCHAR (50)   NOT NULL,
    [Price]              FLOAT (53)      NOT NULL,
    [ImageColumn]        VARBINARY (MAX) NULL,
    [ProductDescription] TEXT            NULL,
    CONSTRAINT [PK_tProducts_UserID] PRIMARY KEY CLUSTERED ([ProductID] ASC),
    CONSTRAINT [AK_tProducts_ProductName] UNIQUE NONCLUSTERED ([ProductName] ASC)
);


GO
PRINT N'Creating [dbo].[tPromotions]...';


GO
CREATE TABLE [dbo].[tPromotions] (
    [PromoID]       INT        IDENTITY (1, 1) NOT NULL,
    [DiscountValue] FLOAT (53) NULL,
    CONSTRAINT [PK_tPromotions_PromoID] PRIMARY KEY CLUSTERED ([PromoID] ASC)
);


GO
PRINT N'Creating [dbo].[tUsers]...';


GO
CREATE TABLE [dbo].[tUsers] (
    [UserID]      INT            IDENTITY (1, 1) NOT NULL,
    [Pass]        NVARCHAR (12)  NOT NULL,
    [FirstName]   NVARCHAR (25)  NOT NULL,
    [LastName]    NVARCHAR (25)  NOT NULL,
    [UserType]    NVARCHAR (25)  NOT NULL,
    [Email]       NVARCHAR (100) NOT NULL,
    [PhoneNumber] NVARCHAR (11)  NULL,
    [Company]     VARCHAR (100)  NULL,
    [Address1]    VARCHAR (120)  NOT NULL,
    [City]        VARCHAR (100)  NOT NULL,
    [PostalCode]  VARCHAR (20)   NOT NULL,
    CONSTRAINT [PK_tUsers_UserID] PRIMARY KEY CLUSTERED ([UserID] ASC)
);


GO
PRINT N'Creating [dbo].[FK_tOrderDetails_Products]...';


GO
ALTER TABLE [dbo].[tOrderDetails]
    ADD CONSTRAINT [FK_tOrderDetails_Products] FOREIGN KEY ([ProductID]) REFERENCES [dbo].[tProducts] ([ProductID]);


GO
PRINT N'Creating [dbo].[FK_tOrderDetails_Promotions]...';


GO
ALTER TABLE [dbo].[tOrderDetails]
    ADD CONSTRAINT [FK_tOrderDetails_Promotions] FOREIGN KEY ([PromoID]) REFERENCES [dbo].[tPromotions] ([PromoID]);


GO
PRINT N'Creating [dbo].[FK_tOrders_OrderDetails]...';


GO
ALTER TABLE [dbo].[tOrders]
    ADD CONSTRAINT [FK_tOrders_OrderDetails] FOREIGN KEY ([OrderID]) REFERENCES [dbo].[tOrderDetails] ([OrderID]);


GO
PRINT N'Creating [dbo].[FK_tOrders_Users]...';


GO
ALTER TABLE [dbo].[tOrders]
    ADD CONSTRAINT [FK_tOrders_Users] FOREIGN KEY ([UserID]) REFERENCES [dbo].[tUsers] ([UserID]);


GO
PRINT N'Creating [dbo].[FK_tProducts_tCategories]...';


GO
ALTER TABLE [dbo].[tProducts]
    ADD CONSTRAINT [FK_tProducts_tCategories] FOREIGN KEY ([CategoryID]) REFERENCES [dbo].[tCategories] ([CategoryID]);


GO
PRINT N'Creating [dbo].[tCards].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains info about cards.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tCards';


GO
PRINT N'Creating [dbo].[tCategories].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains info about categories of products.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tCategories';


GO
PRINT N'Creating [dbo].[tOrderDetails].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains info about single order.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tOrderDetails';


GO
PRINT N'Creating [dbo].[tOrders].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains info about all orders.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tOrders';


GO
PRINT N'Creating [dbo].[tProducts].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains info about products in shop.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tProducts';


GO
PRINT N'Creating [dbo].[tPromotions].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains information about current promotions.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tPromotions';


GO
PRINT N'Creating [dbo].[tUsers].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Contains info about single user.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tUsers';


GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
